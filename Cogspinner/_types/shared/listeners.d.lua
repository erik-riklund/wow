--- @meta
--    ____                      _
--   / ___|___   __ _ ___ _ __ (_)_ __  _ __   ___ _ __
--  | |   / _ \ / _` / __| '_ \| | '_ \| '_ \ / _ \ '__|
--  | |__| (_) | (_| \__ \ |_) | | | | | | | |  __/ |
--   \____\___/ \__, |___/ .__/|_|_| |_|_| |_|\___|_|
--              |___/    |_|

--
--- Manages a collection of event listeners, allowing for registration, retrieval,
--- removal, and invocation of callbacks in response to events.
---
--- @class ListenerManager
---
--- @field listeners? List (Optional) A list to store registered event listeners, maintaining their order of registration.
--- @field registerListener fun(self: ListenerManager, listener: Listener) Registers a new listener, ensuring its validity and adding it to the list.
--- @field retrieveListener fun(self: ListenerManager, identifier: string): Listener?  Retrieves a listener by its unique identifier, useful for targeted operations.
--- @field removeListener fun(self: ListenerManager, identifier: string) Removes a listener based on its identifier, allowing for dynamic management of subscriptions.
--- @field invokeListeners fun(self: ListenerManager, arguments: unknown[]|nil, async: boolean|nil)  Triggers all registered listeners, passing arguments and optionally executing callbacks asynchronously.
--

--
--- A function that creates a new instance of a ListenerManager, providing an organized
--- way to handle event subscriptions and callbacks.
---
--- @alias ListenerManagerConstructor fun(): ListenerManager
--

--
--- Represents an event listener, encapsulating the callback function and its associated metadata.
---
--- @class Listener
---
--- @field callback function The function to be executed when the corresponding event is triggered.
--- @field identifier? string  (optional) A unique identifier for the listener, helpful for managing and removing specific listeners.
--- @field recurring? boolean (optional) Specifies if the listener is triggered every time the event occurs or only the first time (default: true).
--
